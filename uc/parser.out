Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration
Rule 3     global_declaration_list -> global_declaration_list global_declaration
Rule 4     global_declaration -> declaration
Rule 5     global_declaration -> function_definition
Rule 6     function_definition -> type_specifier declarator compound_statement
Rule 7     type_specifier -> VOID
Rule 8     type_specifier -> CHAR
Rule 9     type_specifier -> INT
Rule 10    declarator -> ID
Rule 11    declarator -> LPAREN declarator RPAREN
Rule 12    declarator -> declarator LBRACKET constant_expression RBRACKET
Rule 13    declarator -> declarator LBRACKET RBRACKET
Rule 14    declarator -> declarator LPAREN parameter_list RPAREN
Rule 15    declarator -> declarator LPAREN RPAREN
Rule 16    constant_expression -> binary_expression
Rule 17    binary_expression -> unary_expression
Rule 18    binary_expression -> binary_expression TIMES binary_expression
Rule 19    binary_expression -> binary_expression DIVIDE binary_expression
Rule 20    binary_expression -> binary_expression MOD binary_expression
Rule 21    binary_expression -> binary_expression PLUS binary_expression
Rule 22    binary_expression -> binary_expression MINUS binary_expression
Rule 23    binary_expression -> binary_expression LT binary_expression
Rule 24    binary_expression -> binary_expression LE binary_expression
Rule 25    binary_expression -> binary_expression GT binary_expression
Rule 26    binary_expression -> binary_expression GE binary_expression
Rule 27    binary_expression -> binary_expression EQ binary_expression
Rule 28    binary_expression -> binary_expression NE binary_expression
Rule 29    binary_expression -> binary_expression AND binary_expression
Rule 30    binary_expression -> binary_expression OR binary_expression
Rule 31    unary_expression -> postfix_expression
Rule 32    unary_expression -> unary_operator unary_expression
Rule 33    postfix_expression -> primary_expression
Rule 34    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 35    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 36    postfix_expression -> postfix_expression LPAREN argument_expression RPAREN
Rule 37    primary_expression -> ID
Rule 38    primary_expression -> LPAREN expression RPAREN
Rule 39    primary_expression -> constant
Rule 40    constant -> INT_CONST
Rule 41    constant -> CHAR_CONST
Rule 42    constant -> STRING_LITERAL
Rule 43    expression -> assignment_expression
Rule 44    expression -> expression COMMA assignment_expression
Rule 45    argument_expression -> assignment_expression
Rule 46    argument_expression -> argument_expression COMMA assignment_expression
Rule 47    assignment_expression -> binary_expression
Rule 48    assignment_expression -> unary_expression EQUALS assignment_expression
Rule 49    unary_operator -> PLUS
Rule 50    unary_operator -> MINUS
Rule 51    unary_operator -> NOT
Rule 52    parameter_list -> parameter_declaration
Rule 53    parameter_list -> parameter_list COMMA parameter_declaration
Rule 54    parameter_declaration -> type_specifier declarator
Rule 55    declaration -> type_specifier SEMI
Rule 56    declaration -> type_specifier init_declarator_list SEMI
Rule 57    init_declarator_list -> init_declarator
Rule 58    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 59    init_declarator -> declarator
Rule 60    init_declarator -> declarator EQUALS initializer
Rule 61    initializer -> assignment_expression
Rule 62    initializer -> LBRACE initializer_list RBRACE
Rule 63    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 64    initializer -> LBRACE RBRACE
Rule 65    initializer_list -> initializer
Rule 66    initializer_list -> initializer_list COMMA initializer
Rule 67    compound_statement -> LBRACE RBRACE
Rule 68    compound_statement -> LBRACE declaration_list RBRACE
Rule 69    compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 70    compound_statement -> LBRACE statement_list RBRACE
Rule 71    declaration_list -> declaration
Rule 72    declaration_list -> declaration_list declaration
Rule 73    statement_list -> statement
Rule 74    statement_list -> statement_list statement
Rule 75    statement -> expression_statement
Rule 76    statement -> compound_statement
Rule 77    statement -> selection_statement
Rule 78    statement -> iteration_statement
Rule 79    statement -> jump_statement
Rule 80    statement -> assert_statement
Rule 81    statement -> print_statement
Rule 82    statement -> read_statement
Rule 83    expression_statement -> SEMI
Rule 84    expression_statement -> expression SEMI
Rule 85    selection_statement -> IF LPAREN expression RPAREN statement
Rule 86    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 87    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 88    iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement
Rule 89    iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement
Rule 90    iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement
Rule 91    iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
Rule 92    iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement
Rule 93    iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement
Rule 94    iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement
Rule 95    iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement
Rule 96    iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement
Rule 97    iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement
Rule 98    iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement
Rule 99    iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement
Rule 100   jump_statement -> BREAK SEMI
Rule 101   jump_statement -> RETURN expression SEMI
Rule 102   jump_statement -> RETURN SEMI
Rule 103   assert_statement -> ASSERT expression SEMI
Rule 104   print_statement -> PRINT LPAREN RPAREN SEMI
Rule 105   print_statement -> PRINT LPAREN expression RPAREN SEMI
Rule 106   read_statement -> READ LPAREN argument_expression RPAREN SEMI

Terminals, with rules where they appear

AND                  : 29
ASSERT               : 103
BREAK                : 100
CHAR                 : 8
CHAR_CONST           : 41
COMMA                : 44 46 53 58 63 66
DIVIDE               : 19
ELSE                 : 86
EQ                   : 27
EQUALS               : 48 60
FOR                  : 88 89 90 91 92 93 94 95 96 97 98 99
GE                   : 26
GT                   : 25
ID                   : 10 37
IF                   : 85 86
INT                  : 9
INT_CONST            : 40
LBRACE               : 62 63 64 67 68 69 70
LBRACKET             : 12 13 35
LE                   : 24
LPAREN               : 11 14 15 34 36 38 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 104 105 106
LT                   : 23
MINUS                : 22 50
MOD                  : 20
NE                   : 28
NOT                  : 51
OR                   : 30
PLUS                 : 21 49
PRINT                : 104 105
RBRACE               : 62 63 64 67 68 69 70
RBRACKET             : 12 13 35
READ                 : 106
RETURN               : 101 102
RPAREN               : 11 14 15 34 36 38 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 104 105 106
SEMI                 : 55 56 83 84 88 88 89 89 90 90 91 91 92 92 93 93 94 95 95 96 96 97 98 99 100 101 102 103 104 105 106
STRING_LITERAL       : 42
TIMES                : 18
VOID                 : 7
WHILE                : 87
error                : 

Nonterminals, with rules where they appear

argument_expression  : 36 46 106
assert_statement     : 80
assignment_expression : 43 44 45 46 48 61
binary_expression    : 16 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 47
compound_statement   : 6 76
constant             : 39
constant_expression  : 12
declaration          : 4 71 72 94 97 98 99
declaration_list     : 68 69 72
declarator           : 6 11 12 13 14 15 54 59 60
expression           : 35 38 44 84 85 86 87 89 90 90 91 91 91 92 93 93 95 96 96 97 98 98 99 101 103 105
expression_statement : 75
function_definition  : 5
global_declaration   : 2 3
global_declaration_list : 1 3
init_declarator      : 57 58
init_declarator_list : 56 58
initializer          : 60 65 66
initializer_list     : 62 63 66
iteration_statement  : 78
jump_statement       : 79
parameter_declaration : 52 53
parameter_list       : 14 53
postfix_expression   : 31 34 35 36
primary_expression   : 33
print_statement      : 81
program              : 0
read_statement       : 82
selection_statement  : 77
statement            : 73 74 85 86 86 87 88 89 90 91 92 93 94 95 96 97 98 99
statement_list       : 69 70 74
type_specifier       : 6 54 55 56
unary_expression     : 17 32 48
unary_operator       : 32

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration
    (3) global_declaration_list -> . global_declaration_list global_declaration
    (4) global_declaration -> . declaration
    (5) global_declaration -> . function_definition
    (55) declaration -> . type_specifier SEMI
    (56) declaration -> . type_specifier init_declarator_list SEMI
    (6) function_definition -> . type_specifier declarator compound_statement
    (7) type_specifier -> . VOID
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    type_specifier                 shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (3) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . declaration
    (5) global_declaration -> . function_definition
    (55) declaration -> . type_specifier SEMI
    (56) declaration -> . type_specifier init_declarator_list SEMI
    (6) function_definition -> . type_specifier declarator compound_statement
    (7) type_specifier -> . VOID
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9

    global_declaration             shift and go to state 10
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    type_specifier                 shift and go to state 6

state 3

    (2) global_declaration_list -> global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration .)


state 4

    (4) global_declaration -> declaration .

    VOID            reduce using rule 4 (global_declaration -> declaration .)
    CHAR            reduce using rule 4 (global_declaration -> declaration .)
    INT             reduce using rule 4 (global_declaration -> declaration .)
    $end            reduce using rule 4 (global_declaration -> declaration .)


state 5

    (5) global_declaration -> function_definition .

    VOID            reduce using rule 5 (global_declaration -> function_definition .)
    CHAR            reduce using rule 5 (global_declaration -> function_definition .)
    INT             reduce using rule 5 (global_declaration -> function_definition .)
    $end            reduce using rule 5 (global_declaration -> function_definition .)


state 6

    (55) declaration -> type_specifier . SEMI
    (56) declaration -> type_specifier . init_declarator_list SEMI
    (6) function_definition -> type_specifier . declarator compound_statement
    (57) init_declarator_list -> . init_declarator
    (58) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (10) declarator -> . ID
    (11) declarator -> . LPAREN declarator RPAREN
    (12) declarator -> . declarator LBRACKET constant_expression RBRACKET
    (13) declarator -> . declarator LBRACKET RBRACKET
    (14) declarator -> . declarator LPAREN parameter_list RPAREN
    (15) declarator -> . declarator LPAREN RPAREN
    (59) init_declarator -> . declarator
    (60) init_declarator -> . declarator EQUALS initializer

    SEMI            shift and go to state 11
    ID              shift and go to state 15
    LPAREN          shift and go to state 16

    init_declarator_list           shift and go to state 12
    declarator                     shift and go to state 13
    init_declarator                shift and go to state 14

state 7

    (7) type_specifier -> VOID .

    SEMI            reduce using rule 7 (type_specifier -> VOID .)
    ID              reduce using rule 7 (type_specifier -> VOID .)
    LPAREN          reduce using rule 7 (type_specifier -> VOID .)


state 8

    (8) type_specifier -> CHAR .

    SEMI            reduce using rule 8 (type_specifier -> CHAR .)
    ID              reduce using rule 8 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 8 (type_specifier -> CHAR .)


state 9

    (9) type_specifier -> INT .

    SEMI            reduce using rule 9 (type_specifier -> INT .)
    ID              reduce using rule 9 (type_specifier -> INT .)
    LPAREN          reduce using rule 9 (type_specifier -> INT .)


state 10

    (3) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)


state 11

    (55) declaration -> type_specifier SEMI .

    VOID            reduce using rule 55 (declaration -> type_specifier SEMI .)
    CHAR            reduce using rule 55 (declaration -> type_specifier SEMI .)
    INT             reduce using rule 55 (declaration -> type_specifier SEMI .)
    $end            reduce using rule 55 (declaration -> type_specifier SEMI .)
    RBRACE          reduce using rule 55 (declaration -> type_specifier SEMI .)
    SEMI            reduce using rule 55 (declaration -> type_specifier SEMI .)
    LBRACE          reduce using rule 55 (declaration -> type_specifier SEMI .)
    IF              reduce using rule 55 (declaration -> type_specifier SEMI .)
    WHILE           reduce using rule 55 (declaration -> type_specifier SEMI .)
    FOR             reduce using rule 55 (declaration -> type_specifier SEMI .)
    BREAK           reduce using rule 55 (declaration -> type_specifier SEMI .)
    RETURN          reduce using rule 55 (declaration -> type_specifier SEMI .)
    ASSERT          reduce using rule 55 (declaration -> type_specifier SEMI .)
    PRINT           reduce using rule 55 (declaration -> type_specifier SEMI .)
    READ            reduce using rule 55 (declaration -> type_specifier SEMI .)
    PLUS            reduce using rule 55 (declaration -> type_specifier SEMI .)
    MINUS           reduce using rule 55 (declaration -> type_specifier SEMI .)
    NOT             reduce using rule 55 (declaration -> type_specifier SEMI .)
    ID              reduce using rule 55 (declaration -> type_specifier SEMI .)
    LPAREN          reduce using rule 55 (declaration -> type_specifier SEMI .)
    INT_CONST       reduce using rule 55 (declaration -> type_specifier SEMI .)
    CHAR_CONST      reduce using rule 55 (declaration -> type_specifier SEMI .)
    STRING_LITERAL  reduce using rule 55 (declaration -> type_specifier SEMI .)


state 12

    (56) declaration -> type_specifier init_declarator_list . SEMI
    (58) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 17
    COMMA           shift and go to state 18


state 13

    (6) function_definition -> type_specifier declarator . compound_statement
    (12) declarator -> declarator . LBRACKET constant_expression RBRACKET
    (13) declarator -> declarator . LBRACKET RBRACKET
    (14) declarator -> declarator . LPAREN parameter_list RPAREN
    (15) declarator -> declarator . LPAREN RPAREN
    (59) init_declarator -> declarator .
    (60) init_declarator -> declarator . EQUALS initializer
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE

    LBRACKET        shift and go to state 20
    LPAREN          shift and go to state 21
    SEMI            reduce using rule 59 (init_declarator -> declarator .)
    COMMA           reduce using rule 59 (init_declarator -> declarator .)
    EQUALS          shift and go to state 22
    LBRACE          shift and go to state 23

    compound_statement             shift and go to state 19

state 14

    (57) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 57 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 57 (init_declarator_list -> init_declarator .)


state 15

    (10) declarator -> ID .

    LBRACKET        reduce using rule 10 (declarator -> ID .)
    LPAREN          reduce using rule 10 (declarator -> ID .)
    EQUALS          reduce using rule 10 (declarator -> ID .)
    LBRACE          reduce using rule 10 (declarator -> ID .)
    SEMI            reduce using rule 10 (declarator -> ID .)
    COMMA           reduce using rule 10 (declarator -> ID .)
    RPAREN          reduce using rule 10 (declarator -> ID .)


state 16

    (11) declarator -> LPAREN . declarator RPAREN
    (10) declarator -> . ID
    (11) declarator -> . LPAREN declarator RPAREN
    (12) declarator -> . declarator LBRACKET constant_expression RBRACKET
    (13) declarator -> . declarator LBRACKET RBRACKET
    (14) declarator -> . declarator LPAREN parameter_list RPAREN
    (15) declarator -> . declarator LPAREN RPAREN

    ID              shift and go to state 15
    LPAREN          shift and go to state 16

    declarator                     shift and go to state 24

state 17

    (56) declaration -> type_specifier init_declarator_list SEMI .

    VOID            reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    CHAR            reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    INT             reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    $end            reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    RBRACE          reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    SEMI            reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    LBRACE          reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    IF              reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    WHILE           reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    FOR             reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    BREAK           reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    RETURN          reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    ASSERT          reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    PRINT           reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    READ            reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    PLUS            reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    MINUS           reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    NOT             reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    ID              reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    LPAREN          reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    INT_CONST       reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    CHAR_CONST      reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)
    STRING_LITERAL  reduce using rule 56 (declaration -> type_specifier init_declarator_list SEMI .)


state 18

    (58) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (59) init_declarator -> . declarator
    (60) init_declarator -> . declarator EQUALS initializer
    (10) declarator -> . ID
    (11) declarator -> . LPAREN declarator RPAREN
    (12) declarator -> . declarator LBRACKET constant_expression RBRACKET
    (13) declarator -> . declarator LBRACKET RBRACKET
    (14) declarator -> . declarator LPAREN parameter_list RPAREN
    (15) declarator -> . declarator LPAREN RPAREN

    ID              shift and go to state 15
    LPAREN          shift and go to state 16

    init_declarator                shift and go to state 25
    declarator                     shift and go to state 26

state 19

    (6) function_definition -> type_specifier declarator compound_statement .

    VOID            reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 6 (function_definition -> type_specifier declarator compound_statement .)


state 20

    (12) declarator -> declarator LBRACKET . constant_expression RBRACKET
    (13) declarator -> declarator LBRACKET . RBRACKET
    (16) constant_expression -> . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RBRACKET        shift and go to state 28
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    constant_expression            shift and go to state 27
    binary_expression              shift and go to state 29
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 21

    (14) declarator -> declarator LPAREN . parameter_list RPAREN
    (15) declarator -> declarator LPAREN . RPAREN
    (52) parameter_list -> . parameter_declaration
    (53) parameter_list -> . parameter_list COMMA parameter_declaration
    (54) parameter_declaration -> . type_specifier declarator
    (7) type_specifier -> . VOID
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT

    RPAREN          shift and go to state 44
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9

    parameter_list                 shift and go to state 43
    parameter_declaration          shift and go to state 45
    type_specifier                 shift and go to state 46

state 22

    (60) init_declarator -> declarator EQUALS . initializer
    (61) initializer -> . assignment_expression
    (62) initializer -> . LBRACE initializer_list RBRACE
    (63) initializer -> . LBRACE initializer_list COMMA RBRACE
    (64) initializer -> . LBRACE RBRACE
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    LBRACE          shift and go to state 49
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    initializer                    shift and go to state 47
    assignment_expression          shift and go to state 48
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 23

    (67) compound_statement -> LBRACE . RBRACE
    (68) compound_statement -> LBRACE . declaration_list RBRACE
    (69) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (70) compound_statement -> LBRACE . statement_list RBRACE
    (71) declaration_list -> . declaration
    (72) declaration_list -> . declaration_list declaration
    (73) statement_list -> . statement
    (74) statement_list -> . statement_list statement
    (55) declaration -> . type_specifier SEMI
    (56) declaration -> . type_specifier init_declarator_list SEMI
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (7) type_specifier -> . VOID
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RBRACE          shift and go to state 52
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    declaration_list               shift and go to state 53
    statement_list                 shift and go to state 54
    declaration                    shift and go to state 55
    statement                      shift and go to state 56
    type_specifier                 shift and go to state 57
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    expression                     shift and go to state 67
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 24

    (11) declarator -> LPAREN declarator . RPAREN
    (12) declarator -> declarator . LBRACKET constant_expression RBRACKET
    (13) declarator -> declarator . LBRACKET RBRACKET
    (14) declarator -> declarator . LPAREN parameter_list RPAREN
    (15) declarator -> declarator . LPAREN RPAREN

    RPAREN          shift and go to state 77
    LBRACKET        shift and go to state 20
    LPAREN          shift and go to state 21


state 25

    (58) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 58 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 58 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 26

    (59) init_declarator -> declarator .
    (60) init_declarator -> declarator . EQUALS initializer
    (12) declarator -> declarator . LBRACKET constant_expression RBRACKET
    (13) declarator -> declarator . LBRACKET RBRACKET
    (14) declarator -> declarator . LPAREN parameter_list RPAREN
    (15) declarator -> declarator . LPAREN RPAREN

    SEMI            reduce using rule 59 (init_declarator -> declarator .)
    COMMA           reduce using rule 59 (init_declarator -> declarator .)
    EQUALS          shift and go to state 22
    LBRACKET        shift and go to state 20
    LPAREN          shift and go to state 21


state 27

    (12) declarator -> declarator LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 78


state 28

    (13) declarator -> declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 13 (declarator -> declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 13 (declarator -> declarator LBRACKET RBRACKET .)
    EQUALS          reduce using rule 13 (declarator -> declarator LBRACKET RBRACKET .)
    LBRACE          reduce using rule 13 (declarator -> declarator LBRACKET RBRACKET .)
    SEMI            reduce using rule 13 (declarator -> declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 13 (declarator -> declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 13 (declarator -> declarator LBRACKET RBRACKET .)


state 29

    (16) constant_expression -> binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 16 (constant_expression -> binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NE              shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91


state 30

    (17) binary_expression -> unary_expression .

    TIMES           reduce using rule 17 (binary_expression -> unary_expression .)
    DIVIDE          reduce using rule 17 (binary_expression -> unary_expression .)
    MOD             reduce using rule 17 (binary_expression -> unary_expression .)
    PLUS            reduce using rule 17 (binary_expression -> unary_expression .)
    MINUS           reduce using rule 17 (binary_expression -> unary_expression .)
    LT              reduce using rule 17 (binary_expression -> unary_expression .)
    LE              reduce using rule 17 (binary_expression -> unary_expression .)
    GT              reduce using rule 17 (binary_expression -> unary_expression .)
    GE              reduce using rule 17 (binary_expression -> unary_expression .)
    EQ              reduce using rule 17 (binary_expression -> unary_expression .)
    NE              reduce using rule 17 (binary_expression -> unary_expression .)
    AND             reduce using rule 17 (binary_expression -> unary_expression .)
    OR              reduce using rule 17 (binary_expression -> unary_expression .)
    RBRACKET        reduce using rule 17 (binary_expression -> unary_expression .)
    SEMI            reduce using rule 17 (binary_expression -> unary_expression .)
    COMMA           reduce using rule 17 (binary_expression -> unary_expression .)
    RPAREN          reduce using rule 17 (binary_expression -> unary_expression .)
    RBRACE          reduce using rule 17 (binary_expression -> unary_expression .)


state 31

    (49) unary_operator -> PLUS .

    PLUS            reduce using rule 49 (unary_operator -> PLUS .)
    MINUS           reduce using rule 49 (unary_operator -> PLUS .)
    NOT             reduce using rule 49 (unary_operator -> PLUS .)
    ID              reduce using rule 49 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 49 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 49 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 49 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 49 (unary_operator -> PLUS .)


state 32

    (50) unary_operator -> MINUS .

    PLUS            reduce using rule 50 (unary_operator -> MINUS .)
    MINUS           reduce using rule 50 (unary_operator -> MINUS .)
    NOT             reduce using rule 50 (unary_operator -> MINUS .)
    ID              reduce using rule 50 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 50 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 50 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 50 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 50 (unary_operator -> MINUS .)


state 33

    (31) unary_expression -> postfix_expression .
    (34) postfix_expression -> postfix_expression . LPAREN RPAREN
    (35) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (36) postfix_expression -> postfix_expression . LPAREN argument_expression RPAREN

    TIMES           reduce using rule 31 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 31 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 31 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 31 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 31 (unary_expression -> postfix_expression .)
    LT              reduce using rule 31 (unary_expression -> postfix_expression .)
    LE              reduce using rule 31 (unary_expression -> postfix_expression .)
    GT              reduce using rule 31 (unary_expression -> postfix_expression .)
    GE              reduce using rule 31 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 31 (unary_expression -> postfix_expression .)
    NE              reduce using rule 31 (unary_expression -> postfix_expression .)
    AND             reduce using rule 31 (unary_expression -> postfix_expression .)
    OR              reduce using rule 31 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 31 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 31 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 31 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 31 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 31 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 31 (unary_expression -> postfix_expression .)
    LPAREN          shift and go to state 92
    LBRACKET        shift and go to state 93


state 34

    (32) unary_expression -> unary_operator . unary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    unary_operator                 shift and go to state 34
    unary_expression               shift and go to state 94
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 35

    (33) postfix_expression -> primary_expression .

    LPAREN          reduce using rule 33 (postfix_expression -> primary_expression .)
    LBRACKET        reduce using rule 33 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 33 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 33 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 33 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 33 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 33 (postfix_expression -> primary_expression .)
    LT              reduce using rule 33 (postfix_expression -> primary_expression .)
    LE              reduce using rule 33 (postfix_expression -> primary_expression .)
    GT              reduce using rule 33 (postfix_expression -> primary_expression .)
    GE              reduce using rule 33 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 33 (postfix_expression -> primary_expression .)
    NE              reduce using rule 33 (postfix_expression -> primary_expression .)
    AND             reduce using rule 33 (postfix_expression -> primary_expression .)
    OR              reduce using rule 33 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 33 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 33 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 33 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 33 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 33 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 33 (postfix_expression -> primary_expression .)


state 36

    (38) primary_expression -> LPAREN . expression RPAREN
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 95
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 37

    (51) unary_operator -> NOT .

    PLUS            reduce using rule 51 (unary_operator -> NOT .)
    MINUS           reduce using rule 51 (unary_operator -> NOT .)
    NOT             reduce using rule 51 (unary_operator -> NOT .)
    ID              reduce using rule 51 (unary_operator -> NOT .)
    LPAREN          reduce using rule 51 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 51 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 51 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 51 (unary_operator -> NOT .)


state 38

    (37) primary_expression -> ID .

    LPAREN          reduce using rule 37 (primary_expression -> ID .)
    LBRACKET        reduce using rule 37 (primary_expression -> ID .)
    TIMES           reduce using rule 37 (primary_expression -> ID .)
    DIVIDE          reduce using rule 37 (primary_expression -> ID .)
    MOD             reduce using rule 37 (primary_expression -> ID .)
    PLUS            reduce using rule 37 (primary_expression -> ID .)
    MINUS           reduce using rule 37 (primary_expression -> ID .)
    LT              reduce using rule 37 (primary_expression -> ID .)
    LE              reduce using rule 37 (primary_expression -> ID .)
    GT              reduce using rule 37 (primary_expression -> ID .)
    GE              reduce using rule 37 (primary_expression -> ID .)
    EQ              reduce using rule 37 (primary_expression -> ID .)
    NE              reduce using rule 37 (primary_expression -> ID .)
    AND             reduce using rule 37 (primary_expression -> ID .)
    OR              reduce using rule 37 (primary_expression -> ID .)
    RBRACKET        reduce using rule 37 (primary_expression -> ID .)
    EQUALS          reduce using rule 37 (primary_expression -> ID .)
    SEMI            reduce using rule 37 (primary_expression -> ID .)
    COMMA           reduce using rule 37 (primary_expression -> ID .)
    RPAREN          reduce using rule 37 (primary_expression -> ID .)
    RBRACE          reduce using rule 37 (primary_expression -> ID .)


state 39

    (39) primary_expression -> constant .

    LPAREN          reduce using rule 39 (primary_expression -> constant .)
    LBRACKET        reduce using rule 39 (primary_expression -> constant .)
    TIMES           reduce using rule 39 (primary_expression -> constant .)
    DIVIDE          reduce using rule 39 (primary_expression -> constant .)
    MOD             reduce using rule 39 (primary_expression -> constant .)
    PLUS            reduce using rule 39 (primary_expression -> constant .)
    MINUS           reduce using rule 39 (primary_expression -> constant .)
    LT              reduce using rule 39 (primary_expression -> constant .)
    LE              reduce using rule 39 (primary_expression -> constant .)
    GT              reduce using rule 39 (primary_expression -> constant .)
    GE              reduce using rule 39 (primary_expression -> constant .)
    EQ              reduce using rule 39 (primary_expression -> constant .)
    NE              reduce using rule 39 (primary_expression -> constant .)
    AND             reduce using rule 39 (primary_expression -> constant .)
    OR              reduce using rule 39 (primary_expression -> constant .)
    RBRACKET        reduce using rule 39 (primary_expression -> constant .)
    EQUALS          reduce using rule 39 (primary_expression -> constant .)
    SEMI            reduce using rule 39 (primary_expression -> constant .)
    COMMA           reduce using rule 39 (primary_expression -> constant .)
    RPAREN          reduce using rule 39 (primary_expression -> constant .)
    RBRACE          reduce using rule 39 (primary_expression -> constant .)


state 40

    (40) constant -> INT_CONST .

    LPAREN          reduce using rule 40 (constant -> INT_CONST .)
    LBRACKET        reduce using rule 40 (constant -> INT_CONST .)
    TIMES           reduce using rule 40 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 40 (constant -> INT_CONST .)
    MOD             reduce using rule 40 (constant -> INT_CONST .)
    PLUS            reduce using rule 40 (constant -> INT_CONST .)
    MINUS           reduce using rule 40 (constant -> INT_CONST .)
    LT              reduce using rule 40 (constant -> INT_CONST .)
    LE              reduce using rule 40 (constant -> INT_CONST .)
    GT              reduce using rule 40 (constant -> INT_CONST .)
    GE              reduce using rule 40 (constant -> INT_CONST .)
    EQ              reduce using rule 40 (constant -> INT_CONST .)
    NE              reduce using rule 40 (constant -> INT_CONST .)
    AND             reduce using rule 40 (constant -> INT_CONST .)
    OR              reduce using rule 40 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 40 (constant -> INT_CONST .)
    EQUALS          reduce using rule 40 (constant -> INT_CONST .)
    SEMI            reduce using rule 40 (constant -> INT_CONST .)
    COMMA           reduce using rule 40 (constant -> INT_CONST .)
    RPAREN          reduce using rule 40 (constant -> INT_CONST .)
    RBRACE          reduce using rule 40 (constant -> INT_CONST .)


state 41

    (41) constant -> CHAR_CONST .

    LPAREN          reduce using rule 41 (constant -> CHAR_CONST .)
    LBRACKET        reduce using rule 41 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 41 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 41 (constant -> CHAR_CONST .)
    MOD             reduce using rule 41 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 41 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 41 (constant -> CHAR_CONST .)
    LT              reduce using rule 41 (constant -> CHAR_CONST .)
    LE              reduce using rule 41 (constant -> CHAR_CONST .)
    GT              reduce using rule 41 (constant -> CHAR_CONST .)
    GE              reduce using rule 41 (constant -> CHAR_CONST .)
    EQ              reduce using rule 41 (constant -> CHAR_CONST .)
    NE              reduce using rule 41 (constant -> CHAR_CONST .)
    AND             reduce using rule 41 (constant -> CHAR_CONST .)
    OR              reduce using rule 41 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 41 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 41 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 41 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 41 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 41 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 41 (constant -> CHAR_CONST .)


state 42

    (42) constant -> STRING_LITERAL .

    LPAREN          reduce using rule 42 (constant -> STRING_LITERAL .)
    LBRACKET        reduce using rule 42 (constant -> STRING_LITERAL .)
    TIMES           reduce using rule 42 (constant -> STRING_LITERAL .)
    DIVIDE          reduce using rule 42 (constant -> STRING_LITERAL .)
    MOD             reduce using rule 42 (constant -> STRING_LITERAL .)
    PLUS            reduce using rule 42 (constant -> STRING_LITERAL .)
    MINUS           reduce using rule 42 (constant -> STRING_LITERAL .)
    LT              reduce using rule 42 (constant -> STRING_LITERAL .)
    LE              reduce using rule 42 (constant -> STRING_LITERAL .)
    GT              reduce using rule 42 (constant -> STRING_LITERAL .)
    GE              reduce using rule 42 (constant -> STRING_LITERAL .)
    EQ              reduce using rule 42 (constant -> STRING_LITERAL .)
    NE              reduce using rule 42 (constant -> STRING_LITERAL .)
    AND             reduce using rule 42 (constant -> STRING_LITERAL .)
    OR              reduce using rule 42 (constant -> STRING_LITERAL .)
    RBRACKET        reduce using rule 42 (constant -> STRING_LITERAL .)
    EQUALS          reduce using rule 42 (constant -> STRING_LITERAL .)
    SEMI            reduce using rule 42 (constant -> STRING_LITERAL .)
    COMMA           reduce using rule 42 (constant -> STRING_LITERAL .)
    RPAREN          reduce using rule 42 (constant -> STRING_LITERAL .)
    RBRACE          reduce using rule 42 (constant -> STRING_LITERAL .)


state 43

    (14) declarator -> declarator LPAREN parameter_list . RPAREN
    (53) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 96
    COMMA           shift and go to state 97


state 44

    (15) declarator -> declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 15 (declarator -> declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 15 (declarator -> declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 15 (declarator -> declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 15 (declarator -> declarator LPAREN RPAREN .)
    SEMI            reduce using rule 15 (declarator -> declarator LPAREN RPAREN .)
    COMMA           reduce using rule 15 (declarator -> declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 15 (declarator -> declarator LPAREN RPAREN .)


state 45

    (52) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 52 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 52 (parameter_list -> parameter_declaration .)


state 46

    (54) parameter_declaration -> type_specifier . declarator
    (10) declarator -> . ID
    (11) declarator -> . LPAREN declarator RPAREN
    (12) declarator -> . declarator LBRACKET constant_expression RBRACKET
    (13) declarator -> . declarator LBRACKET RBRACKET
    (14) declarator -> . declarator LPAREN parameter_list RPAREN
    (15) declarator -> . declarator LPAREN RPAREN

    ID              shift and go to state 15
    LPAREN          shift and go to state 16

    declarator                     shift and go to state 98

state 47

    (60) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 60 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 60 (init_declarator -> declarator EQUALS initializer .)


state 48

    (61) initializer -> assignment_expression .

    SEMI            reduce using rule 61 (initializer -> assignment_expression .)
    COMMA           reduce using rule 61 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 61 (initializer -> assignment_expression .)


state 49

    (62) initializer -> LBRACE . initializer_list RBRACE
    (63) initializer -> LBRACE . initializer_list COMMA RBRACE
    (64) initializer -> LBRACE . RBRACE
    (65) initializer_list -> . initializer
    (66) initializer_list -> . initializer_list COMMA initializer
    (61) initializer -> . assignment_expression
    (62) initializer -> . LBRACE initializer_list RBRACE
    (63) initializer -> . LBRACE initializer_list COMMA RBRACE
    (64) initializer -> . LBRACE RBRACE
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RBRACE          shift and go to state 100
    LBRACE          shift and go to state 49
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    initializer_list               shift and go to state 99
    initializer                    shift and go to state 101
    assignment_expression          shift and go to state 48
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 50

    (47) assignment_expression -> binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    SEMI            reduce using rule 47 (assignment_expression -> binary_expression .)
    COMMA           reduce using rule 47 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 47 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 47 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 47 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NE              shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91


state 51

    (48) assignment_expression -> unary_expression . EQUALS assignment_expression
    (17) binary_expression -> unary_expression .

    EQUALS          shift and go to state 102
    TIMES           reduce using rule 17 (binary_expression -> unary_expression .)
    DIVIDE          reduce using rule 17 (binary_expression -> unary_expression .)
    MOD             reduce using rule 17 (binary_expression -> unary_expression .)
    PLUS            reduce using rule 17 (binary_expression -> unary_expression .)
    MINUS           reduce using rule 17 (binary_expression -> unary_expression .)
    LT              reduce using rule 17 (binary_expression -> unary_expression .)
    LE              reduce using rule 17 (binary_expression -> unary_expression .)
    GT              reduce using rule 17 (binary_expression -> unary_expression .)
    GE              reduce using rule 17 (binary_expression -> unary_expression .)
    EQ              reduce using rule 17 (binary_expression -> unary_expression .)
    NE              reduce using rule 17 (binary_expression -> unary_expression .)
    AND             reduce using rule 17 (binary_expression -> unary_expression .)
    OR              reduce using rule 17 (binary_expression -> unary_expression .)
    SEMI            reduce using rule 17 (binary_expression -> unary_expression .)
    COMMA           reduce using rule 17 (binary_expression -> unary_expression .)
    RPAREN          reduce using rule 17 (binary_expression -> unary_expression .)
    RBRACE          reduce using rule 17 (binary_expression -> unary_expression .)
    RBRACKET        reduce using rule 17 (binary_expression -> unary_expression .)


state 52

    (67) compound_statement -> LBRACE RBRACE .

    VOID            reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    ASSERT          reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    PRINT           reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    READ            reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    NOT             reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    INT_CONST       reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    CHAR_CONST      reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 67 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 67 (compound_statement -> LBRACE RBRACE .)


state 53

    (68) compound_statement -> LBRACE declaration_list . RBRACE
    (69) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (72) declaration_list -> declaration_list . declaration
    (73) statement_list -> . statement
    (74) statement_list -> . statement_list statement
    (55) declaration -> . type_specifier SEMI
    (56) declaration -> . type_specifier init_declarator_list SEMI
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (7) type_specifier -> . VOID
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RBRACE          shift and go to state 103
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    statement_list                 shift and go to state 104
    declaration                    shift and go to state 105
    statement                      shift and go to state 56
    type_specifier                 shift and go to state 57
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    expression                     shift and go to state 67
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 54

    (70) compound_statement -> LBRACE statement_list . RBRACE
    (74) statement_list -> statement_list . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RBRACE          shift and go to state 106
    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    statement                      shift and go to state 107
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    expression                     shift and go to state 67
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 55

    (71) declaration_list -> declaration .

    RBRACE          reduce using rule 71 (declaration_list -> declaration .)
    VOID            reduce using rule 71 (declaration_list -> declaration .)
    CHAR            reduce using rule 71 (declaration_list -> declaration .)
    INT             reduce using rule 71 (declaration_list -> declaration .)
    SEMI            reduce using rule 71 (declaration_list -> declaration .)
    LBRACE          reduce using rule 71 (declaration_list -> declaration .)
    IF              reduce using rule 71 (declaration_list -> declaration .)
    WHILE           reduce using rule 71 (declaration_list -> declaration .)
    FOR             reduce using rule 71 (declaration_list -> declaration .)
    BREAK           reduce using rule 71 (declaration_list -> declaration .)
    RETURN          reduce using rule 71 (declaration_list -> declaration .)
    ASSERT          reduce using rule 71 (declaration_list -> declaration .)
    PRINT           reduce using rule 71 (declaration_list -> declaration .)
    READ            reduce using rule 71 (declaration_list -> declaration .)
    PLUS            reduce using rule 71 (declaration_list -> declaration .)
    MINUS           reduce using rule 71 (declaration_list -> declaration .)
    NOT             reduce using rule 71 (declaration_list -> declaration .)
    ID              reduce using rule 71 (declaration_list -> declaration .)
    LPAREN          reduce using rule 71 (declaration_list -> declaration .)
    INT_CONST       reduce using rule 71 (declaration_list -> declaration .)
    CHAR_CONST      reduce using rule 71 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 71 (declaration_list -> declaration .)


state 56

    (73) statement_list -> statement .

    RBRACE          reduce using rule 73 (statement_list -> statement .)
    SEMI            reduce using rule 73 (statement_list -> statement .)
    LBRACE          reduce using rule 73 (statement_list -> statement .)
    IF              reduce using rule 73 (statement_list -> statement .)
    WHILE           reduce using rule 73 (statement_list -> statement .)
    FOR             reduce using rule 73 (statement_list -> statement .)
    BREAK           reduce using rule 73 (statement_list -> statement .)
    RETURN          reduce using rule 73 (statement_list -> statement .)
    ASSERT          reduce using rule 73 (statement_list -> statement .)
    PRINT           reduce using rule 73 (statement_list -> statement .)
    READ            reduce using rule 73 (statement_list -> statement .)
    PLUS            reduce using rule 73 (statement_list -> statement .)
    MINUS           reduce using rule 73 (statement_list -> statement .)
    NOT             reduce using rule 73 (statement_list -> statement .)
    ID              reduce using rule 73 (statement_list -> statement .)
    LPAREN          reduce using rule 73 (statement_list -> statement .)
    INT_CONST       reduce using rule 73 (statement_list -> statement .)
    CHAR_CONST      reduce using rule 73 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 73 (statement_list -> statement .)


state 57

    (55) declaration -> type_specifier . SEMI
    (56) declaration -> type_specifier . init_declarator_list SEMI
    (57) init_declarator_list -> . init_declarator
    (58) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (59) init_declarator -> . declarator
    (60) init_declarator -> . declarator EQUALS initializer
    (10) declarator -> . ID
    (11) declarator -> . LPAREN declarator RPAREN
    (12) declarator -> . declarator LBRACKET constant_expression RBRACKET
    (13) declarator -> . declarator LBRACKET RBRACKET
    (14) declarator -> . declarator LPAREN parameter_list RPAREN
    (15) declarator -> . declarator LPAREN RPAREN

    SEMI            shift and go to state 11
    ID              shift and go to state 15
    LPAREN          shift and go to state 16

    init_declarator_list           shift and go to state 12
    init_declarator                shift and go to state 14
    declarator                     shift and go to state 26

state 58

    (83) expression_statement -> SEMI .

    RBRACE          reduce using rule 83 (expression_statement -> SEMI .)
    SEMI            reduce using rule 83 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 83 (expression_statement -> SEMI .)
    IF              reduce using rule 83 (expression_statement -> SEMI .)
    WHILE           reduce using rule 83 (expression_statement -> SEMI .)
    FOR             reduce using rule 83 (expression_statement -> SEMI .)
    BREAK           reduce using rule 83 (expression_statement -> SEMI .)
    RETURN          reduce using rule 83 (expression_statement -> SEMI .)
    ASSERT          reduce using rule 83 (expression_statement -> SEMI .)
    PRINT           reduce using rule 83 (expression_statement -> SEMI .)
    READ            reduce using rule 83 (expression_statement -> SEMI .)
    PLUS            reduce using rule 83 (expression_statement -> SEMI .)
    MINUS           reduce using rule 83 (expression_statement -> SEMI .)
    NOT             reduce using rule 83 (expression_statement -> SEMI .)
    ID              reduce using rule 83 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 83 (expression_statement -> SEMI .)
    INT_CONST       reduce using rule 83 (expression_statement -> SEMI .)
    CHAR_CONST      reduce using rule 83 (expression_statement -> SEMI .)
    STRING_LITERAL  reduce using rule 83 (expression_statement -> SEMI .)
    ELSE            reduce using rule 83 (expression_statement -> SEMI .)


state 59

    (75) statement -> expression_statement .

    RBRACE          reduce using rule 75 (statement -> expression_statement .)
    SEMI            reduce using rule 75 (statement -> expression_statement .)
    LBRACE          reduce using rule 75 (statement -> expression_statement .)
    IF              reduce using rule 75 (statement -> expression_statement .)
    WHILE           reduce using rule 75 (statement -> expression_statement .)
    FOR             reduce using rule 75 (statement -> expression_statement .)
    BREAK           reduce using rule 75 (statement -> expression_statement .)
    RETURN          reduce using rule 75 (statement -> expression_statement .)
    ASSERT          reduce using rule 75 (statement -> expression_statement .)
    PRINT           reduce using rule 75 (statement -> expression_statement .)
    READ            reduce using rule 75 (statement -> expression_statement .)
    PLUS            reduce using rule 75 (statement -> expression_statement .)
    MINUS           reduce using rule 75 (statement -> expression_statement .)
    NOT             reduce using rule 75 (statement -> expression_statement .)
    ID              reduce using rule 75 (statement -> expression_statement .)
    LPAREN          reduce using rule 75 (statement -> expression_statement .)
    INT_CONST       reduce using rule 75 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 75 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 75 (statement -> expression_statement .)
    ELSE            reduce using rule 75 (statement -> expression_statement .)


state 60

    (76) statement -> compound_statement .

    RBRACE          reduce using rule 76 (statement -> compound_statement .)
    SEMI            reduce using rule 76 (statement -> compound_statement .)
    LBRACE          reduce using rule 76 (statement -> compound_statement .)
    IF              reduce using rule 76 (statement -> compound_statement .)
    WHILE           reduce using rule 76 (statement -> compound_statement .)
    FOR             reduce using rule 76 (statement -> compound_statement .)
    BREAK           reduce using rule 76 (statement -> compound_statement .)
    RETURN          reduce using rule 76 (statement -> compound_statement .)
    ASSERT          reduce using rule 76 (statement -> compound_statement .)
    PRINT           reduce using rule 76 (statement -> compound_statement .)
    READ            reduce using rule 76 (statement -> compound_statement .)
    PLUS            reduce using rule 76 (statement -> compound_statement .)
    MINUS           reduce using rule 76 (statement -> compound_statement .)
    NOT             reduce using rule 76 (statement -> compound_statement .)
    ID              reduce using rule 76 (statement -> compound_statement .)
    LPAREN          reduce using rule 76 (statement -> compound_statement .)
    INT_CONST       reduce using rule 76 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 76 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 76 (statement -> compound_statement .)
    ELSE            reduce using rule 76 (statement -> compound_statement .)


state 61

    (77) statement -> selection_statement .

    RBRACE          reduce using rule 77 (statement -> selection_statement .)
    SEMI            reduce using rule 77 (statement -> selection_statement .)
    LBRACE          reduce using rule 77 (statement -> selection_statement .)
    IF              reduce using rule 77 (statement -> selection_statement .)
    WHILE           reduce using rule 77 (statement -> selection_statement .)
    FOR             reduce using rule 77 (statement -> selection_statement .)
    BREAK           reduce using rule 77 (statement -> selection_statement .)
    RETURN          reduce using rule 77 (statement -> selection_statement .)
    ASSERT          reduce using rule 77 (statement -> selection_statement .)
    PRINT           reduce using rule 77 (statement -> selection_statement .)
    READ            reduce using rule 77 (statement -> selection_statement .)
    PLUS            reduce using rule 77 (statement -> selection_statement .)
    MINUS           reduce using rule 77 (statement -> selection_statement .)
    NOT             reduce using rule 77 (statement -> selection_statement .)
    ID              reduce using rule 77 (statement -> selection_statement .)
    LPAREN          reduce using rule 77 (statement -> selection_statement .)
    INT_CONST       reduce using rule 77 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 77 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 77 (statement -> selection_statement .)
    ELSE            reduce using rule 77 (statement -> selection_statement .)


state 62

    (78) statement -> iteration_statement .

    RBRACE          reduce using rule 78 (statement -> iteration_statement .)
    SEMI            reduce using rule 78 (statement -> iteration_statement .)
    LBRACE          reduce using rule 78 (statement -> iteration_statement .)
    IF              reduce using rule 78 (statement -> iteration_statement .)
    WHILE           reduce using rule 78 (statement -> iteration_statement .)
    FOR             reduce using rule 78 (statement -> iteration_statement .)
    BREAK           reduce using rule 78 (statement -> iteration_statement .)
    RETURN          reduce using rule 78 (statement -> iteration_statement .)
    ASSERT          reduce using rule 78 (statement -> iteration_statement .)
    PRINT           reduce using rule 78 (statement -> iteration_statement .)
    READ            reduce using rule 78 (statement -> iteration_statement .)
    PLUS            reduce using rule 78 (statement -> iteration_statement .)
    MINUS           reduce using rule 78 (statement -> iteration_statement .)
    NOT             reduce using rule 78 (statement -> iteration_statement .)
    ID              reduce using rule 78 (statement -> iteration_statement .)
    LPAREN          reduce using rule 78 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 78 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 78 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 78 (statement -> iteration_statement .)
    ELSE            reduce using rule 78 (statement -> iteration_statement .)


state 63

    (79) statement -> jump_statement .

    RBRACE          reduce using rule 79 (statement -> jump_statement .)
    SEMI            reduce using rule 79 (statement -> jump_statement .)
    LBRACE          reduce using rule 79 (statement -> jump_statement .)
    IF              reduce using rule 79 (statement -> jump_statement .)
    WHILE           reduce using rule 79 (statement -> jump_statement .)
    FOR             reduce using rule 79 (statement -> jump_statement .)
    BREAK           reduce using rule 79 (statement -> jump_statement .)
    RETURN          reduce using rule 79 (statement -> jump_statement .)
    ASSERT          reduce using rule 79 (statement -> jump_statement .)
    PRINT           reduce using rule 79 (statement -> jump_statement .)
    READ            reduce using rule 79 (statement -> jump_statement .)
    PLUS            reduce using rule 79 (statement -> jump_statement .)
    MINUS           reduce using rule 79 (statement -> jump_statement .)
    NOT             reduce using rule 79 (statement -> jump_statement .)
    ID              reduce using rule 79 (statement -> jump_statement .)
    LPAREN          reduce using rule 79 (statement -> jump_statement .)
    INT_CONST       reduce using rule 79 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 79 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 79 (statement -> jump_statement .)
    ELSE            reduce using rule 79 (statement -> jump_statement .)


state 64

    (80) statement -> assert_statement .

    RBRACE          reduce using rule 80 (statement -> assert_statement .)
    SEMI            reduce using rule 80 (statement -> assert_statement .)
    LBRACE          reduce using rule 80 (statement -> assert_statement .)
    IF              reduce using rule 80 (statement -> assert_statement .)
    WHILE           reduce using rule 80 (statement -> assert_statement .)
    FOR             reduce using rule 80 (statement -> assert_statement .)
    BREAK           reduce using rule 80 (statement -> assert_statement .)
    RETURN          reduce using rule 80 (statement -> assert_statement .)
    ASSERT          reduce using rule 80 (statement -> assert_statement .)
    PRINT           reduce using rule 80 (statement -> assert_statement .)
    READ            reduce using rule 80 (statement -> assert_statement .)
    PLUS            reduce using rule 80 (statement -> assert_statement .)
    MINUS           reduce using rule 80 (statement -> assert_statement .)
    NOT             reduce using rule 80 (statement -> assert_statement .)
    ID              reduce using rule 80 (statement -> assert_statement .)
    LPAREN          reduce using rule 80 (statement -> assert_statement .)
    INT_CONST       reduce using rule 80 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 80 (statement -> assert_statement .)
    STRING_LITERAL  reduce using rule 80 (statement -> assert_statement .)
    ELSE            reduce using rule 80 (statement -> assert_statement .)


state 65

    (81) statement -> print_statement .

    RBRACE          reduce using rule 81 (statement -> print_statement .)
    SEMI            reduce using rule 81 (statement -> print_statement .)
    LBRACE          reduce using rule 81 (statement -> print_statement .)
    IF              reduce using rule 81 (statement -> print_statement .)
    WHILE           reduce using rule 81 (statement -> print_statement .)
    FOR             reduce using rule 81 (statement -> print_statement .)
    BREAK           reduce using rule 81 (statement -> print_statement .)
    RETURN          reduce using rule 81 (statement -> print_statement .)
    ASSERT          reduce using rule 81 (statement -> print_statement .)
    PRINT           reduce using rule 81 (statement -> print_statement .)
    READ            reduce using rule 81 (statement -> print_statement .)
    PLUS            reduce using rule 81 (statement -> print_statement .)
    MINUS           reduce using rule 81 (statement -> print_statement .)
    NOT             reduce using rule 81 (statement -> print_statement .)
    ID              reduce using rule 81 (statement -> print_statement .)
    LPAREN          reduce using rule 81 (statement -> print_statement .)
    INT_CONST       reduce using rule 81 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 81 (statement -> print_statement .)
    STRING_LITERAL  reduce using rule 81 (statement -> print_statement .)
    ELSE            reduce using rule 81 (statement -> print_statement .)


state 66

    (82) statement -> read_statement .

    RBRACE          reduce using rule 82 (statement -> read_statement .)
    SEMI            reduce using rule 82 (statement -> read_statement .)
    LBRACE          reduce using rule 82 (statement -> read_statement .)
    IF              reduce using rule 82 (statement -> read_statement .)
    WHILE           reduce using rule 82 (statement -> read_statement .)
    FOR             reduce using rule 82 (statement -> read_statement .)
    BREAK           reduce using rule 82 (statement -> read_statement .)
    RETURN          reduce using rule 82 (statement -> read_statement .)
    ASSERT          reduce using rule 82 (statement -> read_statement .)
    PRINT           reduce using rule 82 (statement -> read_statement .)
    READ            reduce using rule 82 (statement -> read_statement .)
    PLUS            reduce using rule 82 (statement -> read_statement .)
    MINUS           reduce using rule 82 (statement -> read_statement .)
    NOT             reduce using rule 82 (statement -> read_statement .)
    ID              reduce using rule 82 (statement -> read_statement .)
    LPAREN          reduce using rule 82 (statement -> read_statement .)
    INT_CONST       reduce using rule 82 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 82 (statement -> read_statement .)
    STRING_LITERAL  reduce using rule 82 (statement -> read_statement .)
    ELSE            reduce using rule 82 (statement -> read_statement .)


state 67

    (84) expression_statement -> expression . SEMI
    (44) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 108
    COMMA           shift and go to state 109


state 68

    (85) selection_statement -> IF . LPAREN expression RPAREN statement
    (86) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 110


state 69

    (87) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 111


state 70

    (88) iteration_statement -> FOR . LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> FOR . LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> FOR . LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> FOR . LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> FOR . LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> FOR . LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> FOR . LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> FOR . LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> FOR . LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> FOR . LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> FOR . LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> FOR . LPAREN declaration expression SEMI RPAREN statement

    LPAREN          shift and go to state 112


state 71

    (100) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 113


state 72

    (101) jump_statement -> RETURN . expression SEMI
    (102) jump_statement -> RETURN . SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 115
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 114
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 73

    (103) assert_statement -> ASSERT . expression SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 116
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 74

    (104) print_statement -> PRINT . LPAREN RPAREN SEMI
    (105) print_statement -> PRINT . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 117


state 75

    (106) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 118


state 76

    (43) expression -> assignment_expression .

    SEMI            reduce using rule 43 (expression -> assignment_expression .)
    COMMA           reduce using rule 43 (expression -> assignment_expression .)
    RPAREN          reduce using rule 43 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 43 (expression -> assignment_expression .)


state 77

    (11) declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 11 (declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 11 (declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 11 (declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 11 (declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 11 (declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 11 (declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 11 (declarator -> LPAREN declarator RPAREN .)


state 78

    (12) declarator -> declarator LBRACKET constant_expression RBRACKET .

    LBRACKET        reduce using rule 12 (declarator -> declarator LBRACKET constant_expression RBRACKET .)
    LPAREN          reduce using rule 12 (declarator -> declarator LBRACKET constant_expression RBRACKET .)
    EQUALS          reduce using rule 12 (declarator -> declarator LBRACKET constant_expression RBRACKET .)
    LBRACE          reduce using rule 12 (declarator -> declarator LBRACKET constant_expression RBRACKET .)
    SEMI            reduce using rule 12 (declarator -> declarator LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 12 (declarator -> declarator LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 12 (declarator -> declarator LBRACKET constant_expression RBRACKET .)


state 79

    (18) binary_expression -> binary_expression TIMES . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 119
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 80

    (19) binary_expression -> binary_expression DIVIDE . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 120
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 81

    (20) binary_expression -> binary_expression MOD . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 121
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 82

    (21) binary_expression -> binary_expression PLUS . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 122
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 83

    (22) binary_expression -> binary_expression MINUS . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 123
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 84

    (23) binary_expression -> binary_expression LT . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 124
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 85

    (24) binary_expression -> binary_expression LE . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 125
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 86

    (25) binary_expression -> binary_expression GT . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 126
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 87

    (26) binary_expression -> binary_expression GE . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 127
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 88

    (27) binary_expression -> binary_expression EQ . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 128
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 89

    (28) binary_expression -> binary_expression NE . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 129
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 90

    (29) binary_expression -> binary_expression AND . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 130
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 91

    (30) binary_expression -> binary_expression OR . binary_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    binary_expression              shift and go to state 131
    unary_expression               shift and go to state 30
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 92

    (34) postfix_expression -> postfix_expression LPAREN . RPAREN
    (36) postfix_expression -> postfix_expression LPAREN . argument_expression RPAREN
    (45) argument_expression -> . assignment_expression
    (46) argument_expression -> . argument_expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RPAREN          shift and go to state 132
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    postfix_expression             shift and go to state 33
    argument_expression            shift and go to state 133
    assignment_expression          shift and go to state 134
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 93

    (35) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    postfix_expression             shift and go to state 33
    expression                     shift and go to state 135
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 94

    (32) unary_expression -> unary_operator unary_expression .

    TIMES           reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    DIVIDE          reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    MOD             reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    PLUS            reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    MINUS           reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    LT              reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    LE              reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    GT              reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    GE              reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    EQ              reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    NE              reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    AND             reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    OR              reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    RBRACKET        reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    EQUALS          reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    SEMI            reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    COMMA           reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    RPAREN          reduce using rule 32 (unary_expression -> unary_operator unary_expression .)
    RBRACE          reduce using rule 32 (unary_expression -> unary_operator unary_expression .)


state 95

    (38) primary_expression -> LPAREN expression . RPAREN
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 136
    COMMA           shift and go to state 109


state 96

    (14) declarator -> declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 14 (declarator -> declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 14 (declarator -> declarator LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 14 (declarator -> declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 14 (declarator -> declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 14 (declarator -> declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 14 (declarator -> declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 14 (declarator -> declarator LPAREN parameter_list RPAREN .)


state 97

    (53) parameter_list -> parameter_list COMMA . parameter_declaration
    (54) parameter_declaration -> . type_specifier declarator
    (7) type_specifier -> . VOID
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9

    parameter_declaration          shift and go to state 137
    type_specifier                 shift and go to state 46

state 98

    (54) parameter_declaration -> type_specifier declarator .
    (12) declarator -> declarator . LBRACKET constant_expression RBRACKET
    (13) declarator -> declarator . LBRACKET RBRACKET
    (14) declarator -> declarator . LPAREN parameter_list RPAREN
    (15) declarator -> declarator . LPAREN RPAREN

    RPAREN          reduce using rule 54 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 54 (parameter_declaration -> type_specifier declarator .)
    LBRACKET        shift and go to state 20
    LPAREN          shift and go to state 21


state 99

    (62) initializer -> LBRACE initializer_list . RBRACE
    (63) initializer -> LBRACE initializer_list . COMMA RBRACE
    (66) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 138
    COMMA           shift and go to state 139


state 100

    (64) initializer -> LBRACE RBRACE .

    SEMI            reduce using rule 64 (initializer -> LBRACE RBRACE .)
    COMMA           reduce using rule 64 (initializer -> LBRACE RBRACE .)
    RBRACE          reduce using rule 64 (initializer -> LBRACE RBRACE .)


state 101

    (65) initializer_list -> initializer .

    RBRACE          reduce using rule 65 (initializer_list -> initializer .)
    COMMA           reduce using rule 65 (initializer_list -> initializer .)


state 102

    (48) assignment_expression -> unary_expression EQUALS . assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    unary_expression               shift and go to state 51
    assignment_expression          shift and go to state 140
    binary_expression              shift and go to state 50
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 103

    (68) compound_statement -> LBRACE declaration_list RBRACE .

    VOID            reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    CHAR            reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    SEMI            reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    ASSERT          reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    PRINT           reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    READ            reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    PLUS            reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    ID              reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT_CONST       reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    CHAR_CONST      reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    STRING_LITERAL  reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 68 (compound_statement -> LBRACE declaration_list RBRACE .)


state 104

    (69) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (74) statement_list -> statement_list . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RBRACE          shift and go to state 141
    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    statement                      shift and go to state 107
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    expression                     shift and go to state 67
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 105

    (72) declaration_list -> declaration_list declaration .

    RBRACE          reduce using rule 72 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 72 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 72 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 72 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 72 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 72 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 72 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 72 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 72 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 72 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 72 (declaration_list -> declaration_list declaration .)
    ASSERT          reduce using rule 72 (declaration_list -> declaration_list declaration .)
    PRINT           reduce using rule 72 (declaration_list -> declaration_list declaration .)
    READ            reduce using rule 72 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 72 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 72 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 72 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 72 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 72 (declaration_list -> declaration_list declaration .)
    INT_CONST       reduce using rule 72 (declaration_list -> declaration_list declaration .)
    CHAR_CONST      reduce using rule 72 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 72 (declaration_list -> declaration_list declaration .)


state 106

    (70) compound_statement -> LBRACE statement_list RBRACE .

    VOID            reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    ASSERT          reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    READ            reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    INT_CONST       reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR_CONST      reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING_LITERAL  reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 70 (compound_statement -> LBRACE statement_list RBRACE .)


state 107

    (74) statement_list -> statement_list statement .

    RBRACE          reduce using rule 74 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 74 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 74 (statement_list -> statement_list statement .)
    IF              reduce using rule 74 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 74 (statement_list -> statement_list statement .)
    FOR             reduce using rule 74 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 74 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 74 (statement_list -> statement_list statement .)
    ASSERT          reduce using rule 74 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 74 (statement_list -> statement_list statement .)
    READ            reduce using rule 74 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 74 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 74 (statement_list -> statement_list statement .)
    NOT             reduce using rule 74 (statement_list -> statement_list statement .)
    ID              reduce using rule 74 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 74 (statement_list -> statement_list statement .)
    INT_CONST       reduce using rule 74 (statement_list -> statement_list statement .)
    CHAR_CONST      reduce using rule 74 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 74 (statement_list -> statement_list statement .)


state 108

    (84) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 84 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 84 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 84 (expression_statement -> expression SEMI .)
    IF              reduce using rule 84 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 84 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 84 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 84 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 84 (expression_statement -> expression SEMI .)
    ASSERT          reduce using rule 84 (expression_statement -> expression SEMI .)
    PRINT           reduce using rule 84 (expression_statement -> expression SEMI .)
    READ            reduce using rule 84 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 84 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 84 (expression_statement -> expression SEMI .)
    NOT             reduce using rule 84 (expression_statement -> expression SEMI .)
    ID              reduce using rule 84 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 84 (expression_statement -> expression SEMI .)
    INT_CONST       reduce using rule 84 (expression_statement -> expression SEMI .)
    CHAR_CONST      reduce using rule 84 (expression_statement -> expression SEMI .)
    STRING_LITERAL  reduce using rule 84 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 84 (expression_statement -> expression SEMI .)


state 109

    (44) expression -> expression COMMA . assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    assignment_expression          shift and go to state 142
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 110

    (85) selection_statement -> IF LPAREN . expression RPAREN statement
    (86) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 143
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 111

    (87) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 144
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 112

    (88) iteration_statement -> FOR LPAREN . SEMI SEMI RPAREN statement
    (89) iteration_statement -> FOR LPAREN . SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> FOR LPAREN . SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> FOR LPAREN . expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> FOR LPAREN . SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> FOR LPAREN . expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> FOR LPAREN . declaration SEMI RPAREN statement
    (95) iteration_statement -> FOR LPAREN . expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> FOR LPAREN . expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> FOR LPAREN . declaration SEMI expression RPAREN statement
    (98) iteration_statement -> FOR LPAREN . declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> FOR LPAREN . declaration expression SEMI RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (55) declaration -> . type_specifier SEMI
    (56) declaration -> . type_specifier init_declarator_list SEMI
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (7) type_specifier -> . VOID
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 145
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 146
    declaration                    shift and go to state 147
    assignment_expression          shift and go to state 76
    type_specifier                 shift and go to state 57
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 113

    (100) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 100 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 100 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 100 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 100 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 100 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 100 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 100 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 100 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 100 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 100 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 100 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 100 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 100 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 100 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 100 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 100 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 100 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 100 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 100 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 100 (jump_statement -> BREAK SEMI .)


state 114

    (101) jump_statement -> RETURN expression . SEMI
    (44) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 148
    COMMA           shift and go to state 109


state 115

    (102) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 102 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 102 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 102 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 102 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 102 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 102 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 102 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 102 (jump_statement -> RETURN SEMI .)
    ASSERT          reduce using rule 102 (jump_statement -> RETURN SEMI .)
    PRINT           reduce using rule 102 (jump_statement -> RETURN SEMI .)
    READ            reduce using rule 102 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 102 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 102 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 102 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 102 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 102 (jump_statement -> RETURN SEMI .)
    INT_CONST       reduce using rule 102 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 102 (jump_statement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 102 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 102 (jump_statement -> RETURN SEMI .)


state 116

    (103) assert_statement -> ASSERT expression . SEMI
    (44) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 149
    COMMA           shift and go to state 109


state 117

    (104) print_statement -> PRINT LPAREN . RPAREN SEMI
    (105) print_statement -> PRINT LPAREN . expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RPAREN          shift and go to state 150
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 151
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 118

    (106) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (45) argument_expression -> . assignment_expression
    (46) argument_expression -> . argument_expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    argument_expression            shift and go to state 152
    assignment_expression          shift and go to state 134
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 119

    (18) binary_expression -> binary_expression TIMES binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             shift and go to state 81

  ! MOD             [ reduce using rule 18 (binary_expression -> binary_expression TIMES binary_expression .) ]
  ! TIMES           [ shift and go to state 79 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 120

    (19) binary_expression -> binary_expression DIVIDE binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             shift and go to state 81

  ! MOD             [ reduce using rule 19 (binary_expression -> binary_expression DIVIDE binary_expression .) ]
  ! TIMES           [ shift and go to state 79 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 121

    (20) binary_expression -> binary_expression MOD binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 20 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 79 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! MOD             [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 122

    (21) binary_expression -> binary_expression PLUS binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81

  ! TIMES           [ reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 21 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 123

    (22) binary_expression -> binary_expression MINUS binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81

  ! TIMES           [ reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 22 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 124

    (23) binary_expression -> binary_expression LT binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83

  ! TIMES           [ reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 23 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 125

    (24) binary_expression -> binary_expression LE binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83

  ! TIMES           [ reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 24 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 126

    (25) binary_expression -> binary_expression GT binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83

  ! TIMES           [ reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 25 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 127

    (26) binary_expression -> binary_expression GE binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NE              shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! TIMES           [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! PLUS            [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LT              [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LE              [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! GT              [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! GE              [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! EQ              [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! NE              [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! AND             [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]
  ! OR              [ reduce using rule 26 (binary_expression -> binary_expression GE binary_expression .) ]


state 128

    (27) binary_expression -> binary_expression EQ binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NE              shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! TIMES           [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GE              [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! NE              [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! AND             [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! OR              [ reduce using rule 27 (binary_expression -> binary_expression EQ binary_expression .) ]


state 129

    (28) binary_expression -> binary_expression NE binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NE              shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! TIMES           [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MOD             [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! PLUS            [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LE              [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GE              [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! EQ              [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! NE              [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! AND             [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]
  ! OR              [ reduce using rule 28 (binary_expression -> binary_expression NE binary_expression .) ]


state 130

    (29) binary_expression -> binary_expression AND binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    GE              reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    EQ              reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    NE              reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86

  ! TIMES           [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 29 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 131

    (30) binary_expression -> binary_expression OR binary_expression .
    (18) binary_expression -> binary_expression . TIMES binary_expression
    (19) binary_expression -> binary_expression . DIVIDE binary_expression
    (20) binary_expression -> binary_expression . MOD binary_expression
    (21) binary_expression -> binary_expression . PLUS binary_expression
    (22) binary_expression -> binary_expression . MINUS binary_expression
    (23) binary_expression -> binary_expression . LT binary_expression
    (24) binary_expression -> binary_expression . LE binary_expression
    (25) binary_expression -> binary_expression . GT binary_expression
    (26) binary_expression -> binary_expression . GE binary_expression
    (27) binary_expression -> binary_expression . EQ binary_expression
    (28) binary_expression -> binary_expression . NE binary_expression
    (29) binary_expression -> binary_expression . AND binary_expression
    (30) binary_expression -> binary_expression . OR binary_expression

    GE              reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    EQ              reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    NE              reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    AND             shift and go to state 90

  ! TIMES           [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 30 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! OR              [ shift and go to state 91 ]


state 132

    (34) postfix_expression -> postfix_expression LPAREN RPAREN .

    LPAREN          reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LBRACKET        reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 34 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 133

    (36) postfix_expression -> postfix_expression LPAREN argument_expression . RPAREN
    (46) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 153
    COMMA           shift and go to state 154


state 134

    (45) argument_expression -> assignment_expression .

    RPAREN          reduce using rule 45 (argument_expression -> assignment_expression .)
    COMMA           reduce using rule 45 (argument_expression -> assignment_expression .)


state 135

    (35) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (44) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 155
    COMMA           shift and go to state 109


state 136

    (38) primary_expression -> LPAREN expression RPAREN .

    LPAREN          reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)


state 137

    (53) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 53 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 53 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 138

    (62) initializer -> LBRACE initializer_list RBRACE .

    SEMI            reduce using rule 62 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 62 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 62 (initializer -> LBRACE initializer_list RBRACE .)


state 139

    (63) initializer -> LBRACE initializer_list COMMA . RBRACE
    (66) initializer_list -> initializer_list COMMA . initializer
    (61) initializer -> . assignment_expression
    (62) initializer -> . LBRACE initializer_list RBRACE
    (63) initializer -> . LBRACE initializer_list COMMA RBRACE
    (64) initializer -> . LBRACE RBRACE
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RBRACE          shift and go to state 156
    LBRACE          shift and go to state 49
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    initializer                    shift and go to state 157
    assignment_expression          shift and go to state 48
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 140

    (48) assignment_expression -> unary_expression EQUALS assignment_expression .

    SEMI            reduce using rule 48 (assignment_expression -> unary_expression EQUALS assignment_expression .)
    COMMA           reduce using rule 48 (assignment_expression -> unary_expression EQUALS assignment_expression .)
    RPAREN          reduce using rule 48 (assignment_expression -> unary_expression EQUALS assignment_expression .)
    RBRACE          reduce using rule 48 (assignment_expression -> unary_expression EQUALS assignment_expression .)
    RBRACKET        reduce using rule 48 (assignment_expression -> unary_expression EQUALS assignment_expression .)


state 141

    (69) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    VOID            reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHAR            reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SEMI            reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ASSERT          reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PRINT           reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    READ            reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUS            reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MINUS           reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    NOT             reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ID              reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT_CONST       reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHAR_CONST      reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STRING_LITERAL  reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 69 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 142

    (44) expression -> expression COMMA assignment_expression .

    SEMI            reduce using rule 44 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 44 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 44 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 44 (expression -> expression COMMA assignment_expression .)


state 143

    (85) selection_statement -> IF LPAREN expression . RPAREN statement
    (86) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 158
    COMMA           shift and go to state 109


state 144

    (87) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 159
    COMMA           shift and go to state 109


state 145

    (88) iteration_statement -> FOR LPAREN SEMI . SEMI RPAREN statement
    (89) iteration_statement -> FOR LPAREN SEMI . SEMI expression RPAREN statement
    (90) iteration_statement -> FOR LPAREN SEMI . expression SEMI expression RPAREN statement
    (92) iteration_statement -> FOR LPAREN SEMI . expression SEMI RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 160
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 161
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 146

    (91) iteration_statement -> FOR LPAREN expression . SEMI expression SEMI expression RPAREN statement
    (93) iteration_statement -> FOR LPAREN expression . SEMI SEMI expression RPAREN statement
    (95) iteration_statement -> FOR LPAREN expression . SEMI SEMI RPAREN statement
    (96) iteration_statement -> FOR LPAREN expression . SEMI expression SEMI RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 162
    COMMA           shift and go to state 109


state 147

    (94) iteration_statement -> FOR LPAREN declaration . SEMI RPAREN statement
    (97) iteration_statement -> FOR LPAREN declaration . SEMI expression RPAREN statement
    (98) iteration_statement -> FOR LPAREN declaration . expression SEMI expression RPAREN statement
    (99) iteration_statement -> FOR LPAREN declaration . expression SEMI RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 163
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 164
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 148

    (101) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    ASSERT          reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    PRINT           reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    READ            reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    INT_CONST       reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    STRING_LITERAL  reduce using rule 101 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 101 (jump_statement -> RETURN expression SEMI .)


state 149

    (103) assert_statement -> ASSERT expression SEMI .

    RBRACE          reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    SEMI            reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    LBRACE          reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    MINUS           reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    NOT             reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    STRING_LITERAL  reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 103 (assert_statement -> ASSERT expression SEMI .)


state 150

    (104) print_statement -> PRINT LPAREN RPAREN . SEMI

    SEMI            shift and go to state 165


state 151

    (105) print_statement -> PRINT LPAREN expression . RPAREN SEMI
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 166
    COMMA           shift and go to state 109


state 152

    (106) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (46) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 167
    COMMA           shift and go to state 154


state 153

    (36) postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .

    LPAREN          reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LBRACKET        reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMES           reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVIDE          reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MOD             reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUS            reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS           reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LT              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LE              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GT              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GE              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQ              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    NE              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    AND             reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    OR              reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACKET        reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQUALS          reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SEMI            reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    COMMA           reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RPAREN          reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACE          reduce using rule 36 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)


state 154

    (46) argument_expression -> argument_expression COMMA . assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    assignment_expression          shift and go to state 168
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 155

    (35) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LPAREN          reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 35 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 156

    (63) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMI            reduce using rule 63 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 63 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 63 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 157

    (66) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 66 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 66 (initializer_list -> initializer_list COMMA initializer .)


state 158

    (85) selection_statement -> IF LPAREN expression RPAREN . statement
    (86) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 169
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 159

    (87) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 170
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 160

    (88) iteration_statement -> FOR LPAREN SEMI SEMI . RPAREN statement
    (89) iteration_statement -> FOR LPAREN SEMI SEMI . expression RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RPAREN          shift and go to state 171
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 172
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 161

    (90) iteration_statement -> FOR LPAREN SEMI expression . SEMI expression RPAREN statement
    (92) iteration_statement -> FOR LPAREN SEMI expression . SEMI RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 173
    COMMA           shift and go to state 109


state 162

    (91) iteration_statement -> FOR LPAREN expression SEMI . expression SEMI expression RPAREN statement
    (93) iteration_statement -> FOR LPAREN expression SEMI . SEMI expression RPAREN statement
    (95) iteration_statement -> FOR LPAREN expression SEMI . SEMI RPAREN statement
    (96) iteration_statement -> FOR LPAREN expression SEMI . expression SEMI RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 175
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 174
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 163

    (94) iteration_statement -> FOR LPAREN declaration SEMI . RPAREN statement
    (97) iteration_statement -> FOR LPAREN declaration SEMI . expression RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RPAREN          shift and go to state 176
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 177
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 164

    (98) iteration_statement -> FOR LPAREN declaration expression . SEMI expression RPAREN statement
    (99) iteration_statement -> FOR LPAREN declaration expression . SEMI RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 178
    COMMA           shift and go to state 109


state 165

    (104) print_statement -> PRINT LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    LBRACE          reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    IF              reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    FOR             reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    BREAK           reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    ASSERT          reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    READ            reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    PLUS            reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    MINUS           reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    NOT             reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    ID              reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    INT_CONST       reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    CHAR_CONST      reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    ELSE            reduce using rule 104 (print_statement -> PRINT LPAREN RPAREN SEMI .)


state 166

    (105) print_statement -> PRINT LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 179


state 167

    (106) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 180


state 168

    (46) argument_expression -> argument_expression COMMA assignment_expression .

    RPAREN          reduce using rule 46 (argument_expression -> argument_expression COMMA assignment_expression .)
    COMMA           reduce using rule 46 (argument_expression -> argument_expression COMMA assignment_expression .)


state 169

    (85) selection_statement -> IF LPAREN expression RPAREN statement .
    (86) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 181

  ! ELSE            [ reduce using rule 85 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 170

    (87) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 87 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 171

    (88) iteration_statement -> FOR LPAREN SEMI SEMI RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    statement                      shift and go to state 182
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    expression                     shift and go to state 67
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 172

    (89) iteration_statement -> FOR LPAREN SEMI SEMI expression . RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 183
    COMMA           shift and go to state 109


state 173

    (90) iteration_statement -> FOR LPAREN SEMI expression SEMI . expression RPAREN statement
    (92) iteration_statement -> FOR LPAREN SEMI expression SEMI . RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RPAREN          shift and go to state 185
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 184
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 174

    (91) iteration_statement -> FOR LPAREN expression SEMI expression . SEMI expression RPAREN statement
    (96) iteration_statement -> FOR LPAREN expression SEMI expression . SEMI RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 186
    COMMA           shift and go to state 109


state 175

    (93) iteration_statement -> FOR LPAREN expression SEMI SEMI . expression RPAREN statement
    (95) iteration_statement -> FOR LPAREN expression SEMI SEMI . RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RPAREN          shift and go to state 188
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 187
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 176

    (94) iteration_statement -> FOR LPAREN declaration SEMI RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    statement                      shift and go to state 189
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    expression                     shift and go to state 67
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 177

    (97) iteration_statement -> FOR LPAREN declaration SEMI expression . RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 190
    COMMA           shift and go to state 109


state 178

    (98) iteration_statement -> FOR LPAREN declaration expression SEMI . expression RPAREN statement
    (99) iteration_statement -> FOR LPAREN declaration expression SEMI . RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RPAREN          shift and go to state 192
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 191
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 179

    (105) print_statement -> PRINT LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ASSERT          reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    INT_CONST       reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 105 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)


state 180

    (106) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    RBRACE          reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LBRACE          reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    NOT             reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 106 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 181

    (86) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 193
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 182

    (88) iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .

    RBRACE          reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    SEMI            reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    LBRACE          reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    IF              reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    WHILE           reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    FOR             reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    BREAK           reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    RETURN          reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    ASSERT          reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    PRINT           reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    READ            reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    PLUS            reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    MINUS           reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    NOT             reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    ID              reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    LPAREN          reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    INT_CONST       reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    STRING_LITERAL  reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    ELSE            reduce using rule 88 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)


state 183

    (89) iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 194
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 184

    (90) iteration_statement -> FOR LPAREN SEMI expression SEMI expression . RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 195
    COMMA           shift and go to state 109


state 185

    (92) iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 196
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 186

    (91) iteration_statement -> FOR LPAREN expression SEMI expression SEMI . expression RPAREN statement
    (96) iteration_statement -> FOR LPAREN expression SEMI expression SEMI . RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    RPAREN          shift and go to state 198
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 197
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 187

    (93) iteration_statement -> FOR LPAREN expression SEMI SEMI expression . RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 199
    COMMA           shift and go to state 109


state 188

    (95) iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 200
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 189

    (94) iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .

    RBRACE          reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    SEMI            reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    LBRACE          reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    IF              reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    WHILE           reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    FOR             reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    BREAK           reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    RETURN          reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    ASSERT          reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    PRINT           reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    READ            reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    PLUS            reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    MINUS           reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    NOT             reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    ID              reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    LPAREN          reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    INT_CONST       reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    STRING_LITERAL  reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    ELSE            reduce using rule 94 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)


state 190

    (97) iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 201
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 191

    (98) iteration_statement -> FOR LPAREN declaration expression SEMI expression . RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 202
    COMMA           shift and go to state 109


state 192

    (99) iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 203
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 193

    (86) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 86 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 194

    (89) iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .

    RBRACE          reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    SEMI            reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    IF              reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    WHILE           reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    FOR             reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    BREAK           reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    RETURN          reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    PRINT           reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    READ            reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    PLUS            reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    MINUS           reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    NOT             reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    ID              reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    ELSE            reduce using rule 89 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)


state 195

    (90) iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 204
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 196

    (92) iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .

    RBRACE          reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    SEMI            reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    LBRACE          reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    IF              reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    WHILE           reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    FOR             reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    BREAK           reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    RETURN          reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    ASSERT          reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    PRINT           reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    READ            reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    PLUS            reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    MINUS           reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    NOT             reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    ID              reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    LPAREN          reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    INT_CONST       reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    STRING_LITERAL  reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    ELSE            reduce using rule 92 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)


state 197

    (91) iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression . RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 205
    COMMA           shift and go to state 109


state 198

    (96) iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 206
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 199

    (93) iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 207
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 200

    (95) iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .

    RBRACE          reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    SEMI            reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    LBRACE          reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    IF              reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    WHILE           reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    FOR             reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    BREAK           reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    RETURN          reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    ASSERT          reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    PRINT           reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    READ            reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    PLUS            reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    MINUS           reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    NOT             reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    ID              reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    LPAREN          reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    INT_CONST       reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    STRING_LITERAL  reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    ELSE            reduce using rule 95 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)


state 201

    (97) iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .

    RBRACE          reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    SEMI            reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    IF              reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    WHILE           reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    FOR             reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    BREAK           reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    RETURN          reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    PRINT           reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    READ            reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    PLUS            reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    MINUS           reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    NOT             reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    ID              reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    ELSE            reduce using rule 97 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)


state 202

    (98) iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 208
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 203

    (99) iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .

    RBRACE          reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    SEMI            reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    LBRACE          reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    IF              reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    WHILE           reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    FOR             reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    BREAK           reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    RETURN          reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    ASSERT          reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    PRINT           reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    READ            reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    PLUS            reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    MINUS           reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    NOT             reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    ID              reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    LPAREN          reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    INT_CONST       reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    STRING_LITERAL  reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    ELSE            reduce using rule 99 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)


state 204

    (90) iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .

    RBRACE          reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    SEMI            reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    IF              reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    WHILE           reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    FOR             reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    BREAK           reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    RETURN          reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    PRINT           reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    READ            reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    PLUS            reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    MINUS           reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    NOT             reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    ID              reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    ELSE            reduce using rule 90 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)


state 205

    (91) iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . compound_statement
    (77) statement -> . selection_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) statement -> . assert_statement
    (81) statement -> . print_statement
    (82) statement -> . read_statement
    (83) expression_statement -> . SEMI
    (84) expression_statement -> . expression SEMI
    (67) compound_statement -> . LBRACE RBRACE
    (68) compound_statement -> . LBRACE declaration_list RBRACE
    (69) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (70) compound_statement -> . LBRACE statement_list RBRACE
    (85) selection_statement -> . IF LPAREN expression RPAREN statement
    (86) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (87) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (88) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (89) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (90) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (91) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (92) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (93) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (94) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (95) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (96) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (99) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (100) jump_statement -> . BREAK SEMI
    (101) jump_statement -> . RETURN expression SEMI
    (102) jump_statement -> . RETURN SEMI
    (103) assert_statement -> . ASSERT expression SEMI
    (104) print_statement -> . PRINT LPAREN RPAREN SEMI
    (105) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (106) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (47) assignment_expression -> . binary_expression
    (48) assignment_expression -> . unary_expression EQUALS assignment_expression
    (17) binary_expression -> . unary_expression
    (18) binary_expression -> . binary_expression TIMES binary_expression
    (19) binary_expression -> . binary_expression DIVIDE binary_expression
    (20) binary_expression -> . binary_expression MOD binary_expression
    (21) binary_expression -> . binary_expression PLUS binary_expression
    (22) binary_expression -> . binary_expression MINUS binary_expression
    (23) binary_expression -> . binary_expression LT binary_expression
    (24) binary_expression -> . binary_expression LE binary_expression
    (25) binary_expression -> . binary_expression GT binary_expression
    (26) binary_expression -> . binary_expression GE binary_expression
    (27) binary_expression -> . binary_expression EQ binary_expression
    (28) binary_expression -> . binary_expression NE binary_expression
    (29) binary_expression -> . binary_expression AND binary_expression
    (30) binary_expression -> . binary_expression OR binary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . unary_operator unary_expression
    (33) postfix_expression -> . primary_expression
    (34) postfix_expression -> . postfix_expression LPAREN RPAREN
    (35) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (36) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (49) unary_operator -> . PLUS
    (50) unary_operator -> . MINUS
    (51) unary_operator -> . NOT
    (37) primary_expression -> . ID
    (38) primary_expression -> . LPAREN expression RPAREN
    (39) primary_expression -> . constant
    (40) constant -> . INT_CONST
    (41) constant -> . CHAR_CONST
    (42) constant -> . STRING_LITERAL

    SEMI            shift and go to state 58
    LBRACE          shift and go to state 23
    IF              shift and go to state 68
    WHILE           shift and go to state 69
    FOR             shift and go to state 70
    BREAK           shift and go to state 71
    RETURN          shift and go to state 72
    ASSERT          shift and go to state 73
    PRINT           shift and go to state 74
    READ            shift and go to state 75
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    NOT             shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 36
    INT_CONST       shift and go to state 40
    CHAR_CONST      shift and go to state 41
    STRING_LITERAL  shift and go to state 42

    expression                     shift and go to state 67
    statement                      shift and go to state 209
    expression_statement           shift and go to state 59
    compound_statement             shift and go to state 60
    selection_statement            shift and go to state 61
    iteration_statement            shift and go to state 62
    jump_statement                 shift and go to state 63
    assert_statement               shift and go to state 64
    print_statement                shift and go to state 65
    read_statement                 shift and go to state 66
    assignment_expression          shift and go to state 76
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 33
    unary_operator                 shift and go to state 34
    primary_expression             shift and go to state 35
    constant                       shift and go to state 39

state 206

    (96) iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .

    RBRACE          reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    SEMI            reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    LBRACE          reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    IF              reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    WHILE           reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    FOR             reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    BREAK           reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    RETURN          reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    ASSERT          reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    PRINT           reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    READ            reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    PLUS            reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    MINUS           reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    NOT             reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    ID              reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    LPAREN          reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    INT_CONST       reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    STRING_LITERAL  reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    ELSE            reduce using rule 96 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)


state 207

    (93) iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .

    RBRACE          reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    SEMI            reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    IF              reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    WHILE           reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    FOR             reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    BREAK           reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    RETURN          reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    PRINT           reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    READ            reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    PLUS            reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    MINUS           reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    NOT             reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    ID              reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    ELSE            reduce using rule 93 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)


state 208

    (98) iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .

    RBRACE          reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    SEMI            reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    IF              reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    WHILE           reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    FOR             reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    BREAK           reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    RETURN          reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    PRINT           reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    READ            reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    PLUS            reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    MINUS           reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    NOT             reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    ID              reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    ELSE            reduce using rule 98 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)


state 209

    (91) iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .

    RBRACE          reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    SEMI            reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    IF              reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    WHILE           reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    FOR             reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    BREAK           reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    RETURN          reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    PRINT           reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    READ            reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    PLUS            reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    MINUS           reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    NOT             reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ID              reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ELSE            reduce using rule 91 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TIMES in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 127 resolved as shift
WARNING: shift/reduce conflict for MOD in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for LT in state 127 resolved as shift
WARNING: shift/reduce conflict for LE in state 127 resolved as shift
WARNING: shift/reduce conflict for GT in state 127 resolved as shift
WARNING: shift/reduce conflict for GE in state 127 resolved as shift
WARNING: shift/reduce conflict for EQ in state 127 resolved as shift
WARNING: shift/reduce conflict for NE in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 128 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 128 resolved as shift
WARNING: shift/reduce conflict for MOD in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for LT in state 128 resolved as shift
WARNING: shift/reduce conflict for LE in state 128 resolved as shift
WARNING: shift/reduce conflict for GT in state 128 resolved as shift
WARNING: shift/reduce conflict for GE in state 128 resolved as shift
WARNING: shift/reduce conflict for EQ in state 128 resolved as shift
WARNING: shift/reduce conflict for NE in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for OR in state 128 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 129 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 129 resolved as shift
WARNING: shift/reduce conflict for MOD in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for LT in state 129 resolved as shift
WARNING: shift/reduce conflict for LE in state 129 resolved as shift
WARNING: shift/reduce conflict for GT in state 129 resolved as shift
WARNING: shift/reduce conflict for GE in state 129 resolved as shift
WARNING: shift/reduce conflict for EQ in state 129 resolved as shift
WARNING: shift/reduce conflict for NE in state 129 resolved as shift
WARNING: shift/reduce conflict for AND in state 129 resolved as shift
WARNING: shift/reduce conflict for OR in state 129 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 169 resolved as shift
